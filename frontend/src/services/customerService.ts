import api from './api';
import type { Customer } from '../types/customer';

// Type for creating a new customer, omitting fields generated by the backend
export type CreateCustomerDto = Omit<Customer, 'id' | 'createdAt' | 'updatedAt' | 'registeredById'>;

// Type for updating an existing customer
export type UpdateCustomerDto = Partial<CreateCustomerDto>;

export const getCustomers = async (filters?: any): Promise<Customer[]> => {
  try {
    const response = await api.get('/customers', { params: filters });
    return response.data.data;
  } catch (error) {
    console.error('Failed to get customers', error);
    return [];
  }
};

export const getCustomerById = async (id: string): Promise<Customer> => {
  const response = await api.get(`/customers/${id}`);
  return response.data.data;
};

export const createCustomer = async (customerData: CreateCustomerDto): Promise<Customer> => {
  const response = await api.post('/customers', customerData);
  return response.data.data;
};

export const updateCustomer = async (id: string, customerData: UpdateCustomerDto): Promise<Customer> => {
  const response = await api.put(`/customers/${id}`, customerData);
  return response.data.data;
};

export const deleteCustomer = async (id: string): Promise<void> => {
  await api.delete(`/customers/${id}`);
};
