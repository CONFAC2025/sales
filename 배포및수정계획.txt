  프로젝트 배포 및 지속적인 개선 계획 (정리)

  사용자님의 목표는 온라인 배포, 외부 테스터를 통한 피드백, 그리고 지속적인 유지보수 및 개선입니다. 이를
  위한 저의 계획은 다음과 같습니다.

  1. 핵심 원칙:

   * 무료 티어 활용: 초기 단계에서는 비용 부담 없이 테스트할 수 있도록 클라우드 서비스의 무료 티어를 최대한
     활용합니다.
   * GitHub 연동: 모든 배포는 GitHub 저장소와 연동하여 코드 변경 시 자동으로 배포되도록 설정합니다.
   * 역할 분리: 프론트엔드, 백엔드, 데이터베이스, 파일 스토리지를 각각의 전문 서비스에 배포하여 관리
     효율성과 안정성을 높입니다.

  2. 배포 단계별 계획:

  단계 1: 프론트엔드 배포 (Vercel - 무료 티어)

   * 목표: 사용자 인터페이스(웹사이트)를 온라인에 공개하여 외부인들이 접속할 수 있도록 합니다.
   * 선택 서비스: Vercel (또는 Netlify)
       * 이유: React/Vite 프로젝트 배포에 최적화되어 있으며, GitHub 연동이 쉽고, 자동 배포, 무료 SSL, CDN을
         통한 빠른 접속을 제공합니다. 개인 프로젝트는 무료로 이용 가능합니다.
   * 진행 상황: 사용자님께서 Vercel에 GitHub 저장소(CONFAC2025/sales)를 연결하셨습니다.
   * 남은 작업 (사용자님께서 Vercel 대시보드에서 직접 진행):
       1. Vercel 프로젝트 설정에서 `Root Directory`를 `frontend`로 지정합니다.
       2. `Framework Preset`을 `Vite`로 지정합니다.
       3. 'Production Overrides' 관련 경고를 해결하여, 현재 설정이 최종 적용되도록 합니다.
       4. 설정을 저장하고 재배포를 시작합니다.
       * 결과: https://your-project-name.vercel.app과 같은 공개 URL을 통해 프론트엔드 웹사이트에 접속할 수
         있게 됩니다.

  단계 2: 백엔드 배포 (Render - 무료 티어)

   * 목표: API 서버와 웹소켓 서버를 온라인에 공개하여 프론트엔드와 통신할 수 있도록 합니다.
   * 선택 서비스: Render (또는 Heroku)
       * 이유: Node.js 백엔드 배포에 적합하며, GitHub 연동, 자동 배포, 무료 티어를 제공합니다.
   * 남은 작업 (사용자님께서 Render 대시보드에서 직접 진행):
       1. Render에 GitHub 계정으로 가입하고 CONFAC2025/sales 저장소를 연결합니다.
       2. 백엔드 프로젝트(apt-sales-v3 저장소의 루트)를 'Web Service'로 배포합니다.
       3. 환경 변수 설정: DATABASE_URL, JWT_SECRET 등 .env 파일에 있던 변수들을 Render 대시보드에서
          설정합니다.
       * 결과: https://your-backend-name.onrender.com과 같은 공개 URL을 통해 백엔드 API에 접근할 수 있게
         됩니다.

  단계 3: 데이터베이스 배포 (Render Postgres - 무료 티어)

   * 목표: 로컬 SQLite 대신, 프로덕션용 PostgreSQL 데이터베이스를 온라인에 구축합니다.
   * 선택 서비스: Render Postgres (또는 Supabase)
       * 이유: Render 백엔드와 연동하기 쉽고, 관리형 서비스로 백업/보안 등 관리 부담이 적으며, 무료 티어를
         제공합니다.
   * 남은 작업 (사용자님께서 Render 대시보드에서 직접 진행):
       1. Render 대시보드에서 'PostgreSQL' 서비스를 생성합니다.
       2. 생성된 데이터베이스의 `DATABASE_URL`을 백엔드 환경 변수(`Render`에 설정한 백엔드 앱)에 설정합니다.
       3. 로컬에서 npx prisma migrate deploy 명령어를 사용하여 원격 데이터베이스에 Prisma 스키마를
          적용합니다.
       * 결과: 백엔드 서버가 온라인 데이터베이스와 연동됩니다.

  단계 4: 파일 업로드 스토리지 연동 (Cloudinary 또는 AWS S3 - 무료 티어)

   * 목표: 사용자 업로드 파일(자료실, 채팅 파일 등)을 안전하고 영구적으로 저장합니다.
   * 선택 서비스: Cloudinary (또는 AWS S3)
       * 이유: 무료 티어를 제공하며, 파일 유실 걱정 없이 안정적으로 저장됩니다.
   * 남은 작업 (사용자님께서 직접 진행):
       1. Cloudinary에 가입합니다.
       2. 백엔드 코드의 파일 업로드 로직을 수정하여 로컬 저장 대신 Cloudinary API를 통해 파일을 업로드하도록
          변경합니다.
       3. Cloudinary에서 제공하는 API Key, Secret 등을 백엔드 환경 변수에 설정합니다.
       * 결과: 파일 업로드 기능이 온라인 환경에서 정상 작동합니다.

  단계 5: 프론트엔드-백엔드 연결 및 테스트

   * 목표: 배포된 프론트엔드가 배포된 백엔드와 통신하도록 설정합니다.
   * 남은 작업 (사용자님께서 Vercel 대시보드에서 직접 진행):
       1. Vercel 프로젝트 설정에서 프론트엔드의 환경 변수(`VITE_API_BASE_URL` 등)를 배포된 백엔드 서버의 공개
          URL로 변경합니다.
       2. Vercel에서 프론트엔드를 재배포합니다.
       * 결과: 외부인들이 접속 가능한 프론트엔드 웹사이트에서 로그인, 데이터 조회, 실시간 채팅 등 모든 기능이
         정상 작동하는지 테스트할 수 있습니다.

  ---

  이 계획은 앱을 무료로 온라인에 올리고, 외부 테스터들의 피드백을 받으며, GitHub를 통해 지속적으로 코드를
  개선해 나갈 수 있는 가장 효율적인 방법입니다.